from __future__ import annotations

from enum import Enum
from typing import Any, Literal

from pydantic import Field, RootModel

from libresvip.model.base import BaseModel


class BusControl(BaseModel):
    gain: float = Field(..., title="Gain")
    mute: bool = Field(..., title="Mute")
    pan: float = Field(..., title="Pan")


class CentShift(RootModel[int]):
    root: int = Field(..., title="Cent Shift")


class ClipTime(BaseModel):
    clip_len: int = Field(
        ...,
        alias="clipLen",
        description="The clipped length relative to `clipStart`",
        title="Clipped Length (Ticks)",
    )
    clip_start: int = Field(
        ...,
        alias="clipStart",
        description="The clipped length relative to `start`",
        title="Clipped Start (Ticks)",
    )
    length: int = Field(
        ...,
        description="The actual length of the content in the clip",
        title="Length (Ticks)",
    )
    start: int = Field(
        ...,
        description="The start position of the content in the clip in the timeline",
        title="Start Position (Ticks)",
    )


class Label(BaseModel):
    pos: int = Field(..., title="Position (Ticks)")
    text: str = Field(..., title="Text")


class ControlPoint(BaseModel):
    x: float = Field(..., title="X Position (Note Length Ratio)")
    y: float = Field(..., title="Y Position (Ratio)")


class ControlPoints(RootModel[list[ControlPoint]]):
    root: list[ControlPoint] = Field(default_factory=list, title="Control Points")


class Pronunciation(BaseModel):
    edited: str = Field(..., title="Edited Pronunciation")
    original: str = Field(..., title="Original Pronunciation Generated by G2P")


class Points(BaseModel):
    amp: ControlPoints
    freq: ControlPoints


class Vibrato(BaseModel):
    amp: int = Field(..., title="Amplitude (Cent)")
    end: float = Field(..., title="End (Note Length Ratio)")
    freq: float = Field(..., title="Frequency (Hz)")
    offset: int = Field(..., title="Offset of Tune (Cent)")
    phase: float = Field(..., title="Phase")
    points: Points
    start: float = Field(..., title="Start (Note Length Ratio)")


class Interp(Enum):
    NONE = "none"
    LINEAR = "linear"
    HERMITE = "hermite"


class Node(BaseModel):
    interp: Interp = Field(..., title="Interpolation Type")
    x: int = Field(..., title="X Position (Ticks)")
    y: int = Field(..., title="Y Position (Parameter Value)")


class ParamCurveAnchor(BaseModel):
    nodes: list[Node] = Field(default_factory=list, title="Anchor Node List")
    start: int = Field(..., title="Start Position (Ticks)")
    type: Literal["anchor"] = Field(..., title="Curve Type")


class ParamCurveFree(BaseModel):
    start: int = Field(..., title="Start Position (Ticks)")
    step: Literal[5] = Field(..., title="Step (Ticks)")
    type: Literal["free"] = Field(..., title="Curve Type")
    values: list[int] = Field(..., title="Value List")


class Phoneme(BaseModel):
    language: str = Field(..., title="Language (ISO 639-3 Code)")
    start: int = Field(..., title="Start Position (Milliseconds from Note On)")
    token: str = Field(..., title="Phoneme Token")
    onset: bool = Field(..., title="Onset Flag")


class Tempo(BaseModel):
    pos: int = Field(..., title="Position (Ticks)")
    value: float = Field(..., description="Quarter notes per minute", title="Tempo Value")


class Denominator(Enum):
    INTEGER_1 = 1
    INTEGER_2 = 2
    INTEGER_4 = 4
    INTEGER_8 = 8
    INTEGER_16 = 16
    INTEGER_32 = 32
    INTEGER_64 = 64
    INTEGER_128 = 128


class TimeSignature(BaseModel):
    denominator: Denominator = Field(..., title="Denominator")
    index: int = Field(..., title="Measure number (0-based)")
    numerator: int = Field(..., title="Numerator")


class TrackControl(BaseModel):
    gain: float = Field(..., title="Gain")
    mute: bool = Field(..., title="Mute")
    pan: float = Field(..., title="Pan")
    solo: bool = Field(..., title="Solo")


class Workspace(RootModel[dict[str, dict[str, Any]]]):
    root: dict[str, dict[str, Any]] = Field(..., title="Workspace Item")


class Global(BaseModel):
    author: str = Field(..., title="Project Author")
    cent_shift: CentShift = Field(..., alias="centShift")
    editor_id: str = Field(..., alias="editorId", title="Editor Identifier")
    editor_name: str = Field(..., alias="editorName", title="Editor Name")
    name: str = Field(..., title="Project Name")


class Master(BaseModel):
    control: BusControl


class Timeline(BaseModel):
    labels: list[Label] = Field(default_factory=list, title="Labels")
    tempos: list[Tempo] = Field(default_factory=list, title="Tempos")
    time_signatures: list[TimeSignature] = Field(
        default_factory=list, alias="timeSignatures", title="Time Signatures"
    )


class AudioClip(BaseModel):
    control: BusControl
    name: str = Field(..., title="Clip Name")
    path: str = Field(..., title="Audio File Path")
    time: ClipTime
    type: Literal["audio"] = Field(..., title="Clip Type")
    workspace: Workspace


class Phonemes(BaseModel):
    edited: list[Phoneme] = Field(default_factory=list, title="Edited Phonemes")
    original: list[Phoneme] = Field(
        default_factory=list, title="Original Phonemes Generated from Pronunciation"
    )


class Note(BaseModel):
    cent_shift: CentShift = Field(..., alias="centShift")
    key_num: int = Field(..., alias="keyNum", title="MIDI Key Number")
    language: str = Field(..., title="Language (ISO 639-3 Code)")
    length: int = Field(..., title="Length (Ticks)")
    lyric: str = Field(..., title="Lyric")
    phonemes: Phonemes = Field(..., title="Phonemes")
    pos: int = Field(..., title="Position (Ticks)")
    pronunciation: Pronunciation = Field(..., title="Pronunciation")
    vibrato: Vibrato = Field(..., title="Vibrato")
    workspace: Workspace


class ParamCurve(RootModel[ParamCurveAnchor | ParamCurveFree]):
    root: ParamCurveAnchor | ParamCurveFree = Field(..., title="Parameter Curve")


class ParamCurveList(RootModel[list[ParamCurve]]):
    root: list[ParamCurve] = Field(default_factory=list, title="Parameter Curve List")


class Param(BaseModel):
    edited: ParamCurveList = Field(..., title="Edited Parameter Curves")
    transform: ParamCurveList = Field(..., title="Transform Parameter Curves")
    original: ParamCurveList = Field(..., title="Original Parameter Curves")


class SingingClip(BaseModel):
    control: BusControl
    name: str = Field(..., title="Clip Name")
    notes: list[Note] = Field(default_factory=list, title="Notes")
    params: dict[str, Param] = Field(default_factory=dict, title="Parameters")
    sources: dict[str, dict[str, Any]] = Field(default_factory=dict, title="Sources")
    time: ClipTime
    type: Literal["singing"] = Field(..., title="Clip Type")
    workspace: Workspace


class Clip(RootModel[AudioClip | SingingClip]):
    root: AudioClip | SingingClip = Field(..., title="Clip")


class Track(BaseModel):
    clips: list[Clip] = Field(default_factory=list, title="Clips")
    control: TrackControl
    name: str = Field(..., title="Track Name")
    workspace: Workspace


class Content(BaseModel):
    global_config: Global = Field(
        ...,
        alias="global",
        description="Global metadata for the project",
        title="Global",
    )
    master: Master = Field(..., title="Master")
    timeline: Timeline = Field(..., title="Timeline")
    tracks: list[Track] = Field(default_factory=list, title="Tracks")
    workspace: Workspace


class DiffscopeProjectExchangeFormat(BaseModel):
    content: Content = Field(..., title="Content")
    version: str = Field("1.0.0", title="Version")
