[project]
authors = [{ name = "SoulMelody", email = "yjxrtzyx@gmail.com" }]
license = { text = "MIT" }
requires-python = ">=3.9,<3.14"
classifiers = [
  'Development Status :: 4 - Beta',
  'Programming Language :: Python',
  'Programming Language :: Python :: Implementation :: CPython',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: 3.11',
  'Programming Language :: Python :: 3.12',
  'Programming Language :: Python :: 3.13',
  'Intended Audience :: Developers',
  'Intended Audience :: End Users/Desktop',
  'License :: OSI Approved :: MIT License',
  'Environment :: Console',
  'Operating System :: Unix',
  'Operating System :: POSIX :: Linux',
  'Operating System :: Microsoft :: Windows :: Windows 10',
  'Operating System :: Microsoft :: Windows :: Windows 11',
  'Framework :: Pydantic :: 2',
  'Topic :: File Formats',
  'Topic :: Multimedia :: Sound/Audio :: Sound Synthesis',
  'Typing :: Typed',
]
dependencies = [
  "bidict<0.23.2,>=0.23.1",
  "charset-normalizer<4.0.0,>=3.4.0",
  "construct-typing<1.0.0,>=0.6.2",
  "drawsvg<3.0.0,>=2.4.0",
  "importlib-resources<7.0.0,>=6.4.5; python_version < \"3.11\"",
  "jinja2<4.0.0,>=3.1.4",
  "loguru<1.0.0,>=0.7.3",
  "mido-fix<2.0.0,>=1.2.12",
  "more-itertools<11.0.0,>=10.5.0",
  "omegaconf<3.0.0,>=2.3.0",
  "packaging<24.3,>=24.2",
  "parsimonious<0.11.0,>=0.10.0",
  "platformdirs<5.0.0,>=4.3.6",
  "portion<3.0.0,>=2.6.0",
  "proto-plus<2.0.0,>=1.25.0",
  "pydantic<3.0.0,>=2.10.3",
  "pydantic-extra-types<3.0.0,>=2.10.1",
  "pymediainfo<7.0.0,>=6.1.0; sys_platform != \"emscripten\"",
  "pypinyin<1.0.0,>=0.53.0",
  "pysubs2<2.0.0,>=1.7.3",
  "pyzstd<1.0.0,>=0.16.2; platform_python_implementation == \"PyPy\"",
  "retrie<1.0.0,>=0.3.1",
  "rich<14.0.0,>=13.9.4",
  "typer-slim<1.0.0,>=0.15.1",
  "wanakana-python<2.0.0,>=1.2.2",
  "xsdata-pydantic<24.6,>=24.5",
  "zhon<3.0.0,>=2.1.1",
  "zstandard<0.23.1,>=0.23.0; platform_python_implementation == \"CPython\"",
]
name = "libresvip"
dynamic = ["readme", "version"]
description = "Universal Converter for Singing Voice Projects"

[project.urls]
repository = "https://github.com/SoulMelody/LibreSVIP"
documentation = "https://soulmelody.github.io/LibreSVIP"

[project.optional-dependencies]

ujson = ["ujson>=5.10.0"]
upath = [
  "universal-pathlib<1.0.0,>=0.2.6",
]
ruamel_yaml = [
  "ruamel.yaml>=0.18.6",
  "ruamel.yaml.clib>=0.2.12; platform_python_implementation == \"CPython\" and python_version == \"3.13\"",
]
lxml = ["lxml>=5.3.0"]
tui = [
  "textual>=1.0.0",
  "libresvip[upath]",
]
webui = [
  "nicegui>=2.8.1",
  "libresvip[upath]",
]
desktop = [
  "pyside6<6.8.2,>=6.8.1",
  "fonticon-materialdesignicons7>=7.2.96",
  "httpx>=0.28.1",
  "desktop-notifier>=6.0.0; platform_python_implementation == \"CPython\"",
  "libresvip[upath]",
]

[dependency-groups]
code_gen = [
  "datamodel-code-generator>=0.26.3",
  "gapic-generator>=1.21.0",
  "xsdata[cli]>=24.11",
]
i18n = ["babel>=2.16.0"]
linting = [
  "pre-commit>=4.0.1",
  "ruff>=0.8.3",
  "mypy>=1.13.0",
  "sourcery>=1.27.0",
  "proto-plus-stubs>=0.7.0",
  "types-lxml>=2024.12.13",
  "types-parsimonious>=0.10.0.20240331",
  "types-pyyaml>=6.0.12.20240917",
  "types-ujson>=5.10.0.20240515",
]
packaging = [
  "cx-Freeze>=7.2.7",
  "nuitka>=2.5.6",
  "pyinstaller>=6.11.1",
  "shellingham<2.0.0,>=1.5.4",
]
docs = ["mkdocs-material<10.0.0,>=9.5.48"]
test = ["pytest>=8.3.4", "pytest-datadir>=1.5.0", "textual-dev>=1.7.0"]
all = [
  {include-group = "code_gen"},
  {include-group = "i18n"},
  {include-group = "linting"},
  {include-group = "packaging"},
  {include-group = "docs"},
  {include-group = "test"}
]

[project.scripts]
libresvip-cli = "libresvip.cli.__main__:app"
libresvip-tui = "libresvip.tui.__main__:main"
libresvip-web = "libresvip.web.__main__:main"

[project.gui-scripts]
libresvip-gui = "libresvip.gui.__main__:run"

[project.entry-points.pyinstaller40]
hook-dirs = "libresvip.__pyinstaller:get_hook_dirs"

[tool.hatch.version]
path = "libresvip/__init__.py"

[tool.hatch.build.targets.sdist]
only-include = [
  "libresvip",
]

[tool.hatch.build.targets.wheel]
packages = ["libresvip"]
exclude = [
  "*.po",
  "*.ts",
  "tests",
  "libresvip/res/qml/**",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"

[tool.pytest.ini_options]
addopts = "-s -p no:warnings"
pythonpath = "."
testpaths = "tests"

[tool.ruff]
target-version = "py39"
src = ['libresvip', 'tests']
line-length = 100
fix = true

[tool.ruff.lint]
select = [
  "A",     # builtins
  "ANN",   # annotations
  "ASYNC", # async
  "C4",    # comprehensions
  "DTZ",   # timezone
  "E",     # style errors
  "EM",    # error messages
  "EXE",   # executable
  "F",     # flakes
  "FLY",   # flynt
  "I",     # import sorting
  "INT",   # gettext
  "N",     # naming
  "PERF",  # perflint
  "PIE",   # assign and return
  "PGH",   # pygrep-hooks
  "PLC",   # pylint convention
  "PLE",   # pylint errors
  "PT",    # pytest-style
  "PTH",   # pathlib
  "PYI",   # stubs
  "RUF",   # ruff
  "SIM",   # simplify
  "T10",   # debugger
  "T20",   # print
  "TC",   # type-checking
  "TRY",   # tryceratops
  "UP",    # pyupgrade
  "W",     # style warnings
  "YTT",   # sys.version
]
ignore = [
  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
  "E501",   # Line too long
  "RUF001", # String contains ambiguous symbol
  "RUF009", # Do not perform function call in dataclass defaults
]

[tool.ruff.lint.isort]
known-first-party = ['libresvip', 'tests']

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
disable_error_code = "import-not-found,unused-ignore"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
warn_no_return = false
no_site_packages = true
explicit_package_bases = true

[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"
